From bea5c7cfbc6c13d3ef09f972131eed5c889528b7 Mon Sep 17 00:00:00 2001
From: Ralph Bean <rbean@redhat.com>
Date: Fri, 8 Jul 2016 12:48:33 -0400
Subject: [PATCH] Unbundle fonts

---
 fabulous/text.py | 29 +++++++++++------------------
 1 file changed, 11 insertions(+), 18 deletions(-)

diff --git a/fabulous/text.py b/fabulous/text.py
index 3a0f4ae..dbe4a31 100644
--- a/fabulous/text.py
+++ b/fabulous/text.py
@@ -32,13 +32,7 @@
         from fabulous import text
         print text.Text("Fabulous!", color='#0099ff', shadow=True, skew=5)
 
-    To make things simple, Fabulous bundles the following Google Noto Fonts
-    which look good and are guaranteed to work no matter what:
-
-    - NotoSans-Bold
-    - NotoEmoji-Regular
-
-    For other fonts, Fabulous will do its best to figure out where they are
+    Fabulous will do its best to figure out where they are
     stored. If Fabulous has trouble finding your font, try using an absolute
     path *with* the extension. It's also possible to put the font in the
     ``~/.fonts`` directory and then running ``fc-cache -fv ~/.fonts``.
@@ -68,10 +62,10 @@ class Text(image.Image):
 
         >>> assert Text("Fabulous", shadow=True, skew=5)
 
-        >>> txt = Text("lorem ipsum", font="NotoSans-Bold")
+        >>> txt = Text("lorem ipsum", font="LiberationSans-Regular")
         >>> len(str(txt)) > 0
         True
-        >>> txt = Text(u"ðŸ˜ƒ", font="NotoSans-Bold")
+        >>> txt = Text(u"ðŸ˜ƒ", font="LiberationSans-Regular")
         >>> len(str(txt)) > 0
         True
 
@@ -99,7 +93,7 @@ class Text(image.Image):
     """
 
     def __init__(self, text, fsize=23, color="#0099ff", shadow=False,
-                 skew=None, font='NotoSans-Bold'):
+                 skew=None, font='LiberationSans-Regular'):
         utils.pil_check()
         from PIL import Image, ImageFont, ImageDraw
         self.text = text
@@ -138,10 +132,10 @@ def resolve_font(name):
 
     For example::
 
-        >>> path = resolve_font('NotoSans-Bold')
+        >>> path = resolve_font('LiberationSans-Regular')
 
         >>> fontdir = os.path.join(os.path.dirname(__file__), 'fonts')
-        >>> noto_path = os.path.join(fontdir, 'NotoSans-Bold.ttf')
+        >>> noto_path = os.path.join(fontdir, 'LiberationSans-Regular.ttf')
         >>> noto_path = os.path.abspath(noto_path)
         >>> assert path == noto_path
 
@@ -177,9 +171,9 @@ def get_font_files():
     For example::
 
         >>> fonts = get_font_files()
-        >>> 'NotoSans-Bold' in fonts
+        >>> 'LiberationSans-Regular' in fonts
         True
-        >>> fonts['NotoSans-Bold'].endswith('/NotoSans-Bold.ttf')
+        >>> fonts['LiberationSans-Regular'].endswith('/LiberationSans-Regular.ttf')
         True
 
     """
@@ -220,11 +214,10 @@ def main():
               "this value to the proper background so semi-transparent "
               "pixels will blend properly."))
     parser.add_option(
-        "-F", "--font", dest="font", default='NotoSans-Bold',
+        "-F", "--font", dest="font", default='LiberationSans-Regular',
         help=("Name of font file, or absolute path to one. Use the --list "
-              "flag to see what fonts are available. Fabulous bundles the "
-              "NotoSans-Bold and NotoEmoji-Regular fonts, which are guaranteed "
-              "to work. Default: %default"))
+              "flag to see what fonts are available. "
+              "Default: %default"))
     parser.add_option(
         "-Z", "--size", dest="fsize", type="int", default=23,
         help=("Size of font in points.  Default: %default"))
-- 
2.7.4

